// Создает объект ОписаниеОповещения и связывает его с вызовом указанной процедуры модуля.
// Используется для описания вызова процедуры программного модуля, который будет осуществлен
// при наступлении какого-либо ожидаемого события.
//
// Параметры:
//   ИмяПроцедуры - Строка - Содержит имя экспортируемой процедуры модуля, которая будет вызвана.
//   Модуль - Строка - Программный модуль, процедура которого будет вызвана.
//   ДополнительныеПараметры - Произвольный - Содержит дополнительные параметры. 
//		При вызове передается в указанную процедуру последним параметром.
//   ИмяПроцедурыОбработкиОшибки - Строка - Имя экспортируемой процедуры модуля, которая будет 
//		вызвана при возникновении ошибки во время вызова методов. 
//   МодульОбработкиОшибки - Строка - Программный модуль, процедура которого будет вызвана при 
//		возникновении ошибки во время вызова методов. 
//
//  Возвращаемое значение:
//   ОписаниеОповещения - Объект ОписаниеОповещения с заполненными параметрами
//
Функция Создать(ИмяПроцедуры, Модуль, ДополнительныеПараметры = Неопределено, ИмяПроцедурыОбработкиОшибки = "", МодульОбработкиОшибки = Неопределено) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		ИмяПроцедуры,
		Модуль,
		ДополнительныеПараметры,
		ИмяПроцедурыОбработкиОшибки,
		МодульОбработкиОшибки
	);

	Возврат ОписаниеОповещения;

КонецФункции

// Запускает выполнение процедуры, описанной в параметре <ВыполняемоеОповещение>. 
// Вызывающая процедура может передать процедуру обработки результата в виде объекта ОписаниеОповещения,
// 		которая будет вызвана после получения результата блокирующего метода.
//
// Параметры:
//   ВыполняемоеОповещение - ОписаниеОповещения - Содержит описание процедуры, вызов которой будет произведен
//		со следующими параметрами:
//		<Результат> - значение результата, переданное вторым параметром при вызове метода, 
//		<ДополнительныеПараметры> - значение, которое было указано при создании объекта оповещения.	
//   Результат - Произвольный - Значение, которое будет передано в процедуру, описанную параметром <ВыполняемоеОповещение>. 
//		Содержит результат, который мог быть получен при помощи алгоритма с использованием блокирующих методов.
//		Может быть использовано как выходной параметр для получения результата работы оповещения.
//
Процедура ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат = Неопределено) Экспорт

	ПараметрыОповещения = Новый Массив;
	ПараметрыОповещения.Добавить(Результат);
	ПараметрыОповещения.Добавить(ВыполняемоеОповещение.ДополнительныеПараметры);

	Рефлектор = Новый Рефлектор;
	
	Попытка
		Рефлектор.ВызватьМетод(ВыполняемоеОповещение.Модуль, ВыполняемоеОповещение.ИмяПроцедуры, ПараметрыОповещения);
		Результат = ПараметрыОповещения[0];
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		Если НЕ ЗначениеЗаполнено(ВыполняемоеОповещение.ИмяПроцедурыОбработкиОшибки) Тогда
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;

		СтандартнаяОбработка = Истина;
		
		ПараметрыОповещения = Новый Массив;
		ПараметрыОповещения.Добавить(ИнформацияОбОшибке());
		ПараметрыОповещения.Добавить(СтандартнаяОбработка);
		ПараметрыОповещения.Добавить(ВыполняемоеОповещение.ДополнительныеПараметры);

		Рефлектор = Новый Рефлектор;		
		Рефлектор.ВызватьМетод(ВыполняемоеОповещение.МодульОбработкиОшибки, ВыполняемоеОповещение.ИмяПроцедурыОбработкиОшибки, ПараметрыОповещения);

		Если ПараметрыОповещения[1] Тогда
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
	КонецПопытки;

КонецПроцедуры
